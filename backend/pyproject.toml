[project]
name = "ai-document-assistant-backend"
version = "1.0.0"
description = "AI Document Assistant Backend - Python service for document processing and RAG"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "AI Document Assistant Team"}
]
keywords = ["ai", "document", "assistant", "rag", "langchain", "chromadb"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core AI/ML libraries
    "langchain>=0.3.0",
    "langchain-core>=0.3.0",
    "langchain-text-splitters>=0.3.0",
    # Database ORM
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    # Vector store
    "chromadb>=0.4.24",
    # Web crawling
    "scrapy>=2.11.0",
    "beautifulsoup4>=4.12.0",
    "markdownify>=0.11.6",
    "lxml>=4.9.0",
    # Data validation and models
    "pydantic>=2.7.4",
    # Document processing
    "pypdf==5.9.0",
    "python-docx==1.2.0",
    "python-magic==0.4.27",
    "chardet==5.2.0",
    # Embeddings (OpenAI compatible)
    "openai>=1.99.4",
    "langchain-openai>=0.3.0",
    # HTTP server (optional)
    "fastapi==0.116.1",
    "uvicorn==0.35.0",
    # Async support
    "aiofiles>=24.0",
    # Logging and utilities
    "loguru==0.7.2",
    "httpx>=0.28.1",
    "dotenv>=0.9.9",
    "sse-starlette>=3.0.2",
    "markdown-it-py>=3.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==8.2.0",
    "pytest-asyncio==0.23.6",
    "pytest-cov==5.0.0",

    # Code quality
    "black==24.4.0",
    "ruff==0.4.4",
    "mypy==1.10.0",

    # Type stubs
    "types-requests==2.32.0.20240523",
]

test = [
    "pytest==8.2.0",
    "pytest-asyncio==0.23.6",
    "pytest-cov==5.0.0",
]

[project.scripts]
ai-document-assistant = "api_server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["crawler", "data_processing", "rag", "vector_store", "api", "models", "services"]
include = ["api_server.py"]

[tool.uv]
dev-dependencies = [
    # Testing
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.6",
    "pytest-cov>=5.0.0",

    # Code quality
    "black>=24.4.0",
    "ruff>=0.4.4",
    "mypy>=1.10.0",

    # Type stubs
    "types-requests>=2.32.0.20240523",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "crawl4ai.*",
    "chromadb.*",
    "langchain.*",
    "langchain_community.*",
    "langchain_core.*",
    "langchain_text_splitters.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=./",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
